{
  "name": "codessa",
  "displayName": "Codessa - The goddess of code",
  "description": "Codessa: Your agentic AI programmer with multi-provider support, advanced file manipulation, and customizable workflows.",
  "version": "1.0.0",
  "publisher": "TekNerds-ITS",
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Programming Languages",
    "Machine Learning",
    "Other"
  ],
  "keywords": [
    "codessa",
    "ai-pair-programmer",
    "ai-assistant",
    "ai",
    "llm",
    "agent",
    "coding assistant",
    "openai",
    "ollama",
    "mistral",
    "google",
    "anthropic",
    "refactor",
    "debug",
    "generate code"
  ],
  "icon": "images/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/djlaserman/codessa"
  },
  "main": "./out/extension.js",
  "activationEvents": [
    "onStartupFinished"
  ],
  "contributes": {
    "commands": [
      {
        "command": "codessa.openModeSelector",
        "title": "Codessa: Select Operation Mode..."
      },
      {
        "command": "codessa.askMode",
        "title": "Codessa: Ask Mode"
      },
      {
        "command": "codessa.chatMode",
        "title": "Codessa: Chat Mode"
      },
      {
        "command": "codessa.debugMode",
        "title": "Codessa: Debug Mode"
      },
      {
        "command": "codessa.editMode",
        "title": "Codessa: Edit Mode"
      },
      {
        "command": "codessa.agentMode",
        "title": "Codessa: Agent Mode"
      },
      {
        "command": "codessa.multiAgentMode",
        "title": "Codessa: Multi-Agent Mode"
      },
      {
        "command": "codessa.runTask",
        "title": "Codessa: Run General Task with Agent..."
      },
      {
        "command": "codessa.startChat",
        "title": "Codessa: Start Chat with Agent..."
      },
      {
        "command": "codessa.editCode",
        "title": "Codessa: Edit Code with Agent..."
      },
      {
        "command": "codessa.generateCode",
        "title": "Codessa: Generate Code with Agent..."
      },
      {
        "command": "codessa.runSupervisorTask",
        "title": "Codessa: Run Multi-Agent Task..."
      },
      {
        "command": "codessa.inlineAction",
        "title": "Codessa: Generate/Edit Inline..."
      },
      {
        "command": "codessa.refreshAgentView",
        "title": "Refresh Agents",
        "icon": "$(refresh)"
      },
      {
        "command": "codessa.addAgent",
        "title": "Codessa: Add New Agent..."
      },
      {
        "command": "codessa.deleteAgent",
        "title": "Codessa: Delete Agent..."
      },
      {
        "command": "codessa.openSettings",
        "title": "Codessa: Configure Settings..."
      },
      {
        "command": "codessa.openChatView",
        "title": "Codessa: Open Chat Panel"
      },
      {
        "command": "codessa.openSettingsView",
        "title": "Codessa: Open Settings Panel"
      },
      {
        "command": "codessa.startChatWithAgentContext",
        "title": "Start Chat"
      },
      {
        "command": "codessa.runEditTaskWithAgentContext",
        "title": "Edit Code..."
      },
      {
        "command": "codessa.runGenerateTaskWithAgentContext",
        "title": "Generate Code..."
      },
      {
        "command": "codessa.runGeneralTaskWithAgentContext",
        "title": "Run General Task..."
      },
      {
        "command": "codessa.runSupervisorTaskContext",
        "title": "Run Supervisor Task..."
      },
      {
        "command": "codessa.deleteAgentContext",
        "title": "Delete Agent"
      },
      {
        "command": "codessa.showLogs",
        "title": "Codessa: Show Logs"
      },
      {
        "command": "codessa.addAgent",
        "title": "Codessa: Create New Agent"
      },
      {
        "command": "codessa.editAgent",
        "title": "Codessa: Edit Agent"
      },
      {
        "command": "codessa.deleteAgent",
        "title": "Codessa: Delete Agent",
        "icon": "$(trash)"
      },
      {
        "command": "codessa.refreshAgentTree",
        "title": "Codessa: Refresh Agents",
        "icon": "$(refresh)"
      },
      {
        "command": "codessa.openAgentDetailsPanel",
        "title": "Codessa: Open Agent Details"
      },
      {
        "command": "codessa.openDashboard",
        "title": "Codessa: Open Dashboard"
      },
      {
        "command": "codessa.chatWithAgent",
        "title": "Codessa: Chat with Agent"
      },
      {
        "command": "codessa.showQuickActions",
        "title": "Codessa: Show Quick Actions"
      },
      {
        "command": "codessa.openProviderSettings",
        "title": "Codessa: Configure Provider Settings"
      },
      {
        "command": "codessa.openWorkflowManager",
        "title": "Codessa: Open Workflow Manager"
      },
      {
        "command": "codessa.manageMemory",
        "title": "Codessa: Manage Memory"
      },
      {
        "command": "codessa.viewMemories",
        "title": "Codessa: View Memories"
      },
      {
        "command": "codessa.clearMemories",
        "title": "Codessa: Clear All Memories"
      },
      {
        "command": "codessa.memorySettings",
        "title": "Codessa: Memory Settings"
      },
      {
        "command": "codessa.openMemoryView",
        "title": "Codessa: Open Memory View"
      },
      {
        "command": "codessa.addMemory",
        "title": "Codessa: Add Memory"
      },
      {
        "command": "codessa.chunkFile",
        "title": "Codessa: Chunk File for Memory"
      },
      {
        "command": "codessa.chunkWorkspace",
        "title": "Codessa: Chunk Workspace for Memory"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "codessa-sidebar",
          "title": "Codessa",
          "icon": "images/icon.png"
        }
      ]
    },
    "views": {
      "codessa-sidebar": [
        {
          "id": "codessaAgentView",
          "name": "Agents",
          "icon": "$(person)",
          "contextualTitle": "Codessa Agents"
        },
        {
          "id": "codessaToolsView",
          "name": "Tools",
          "icon": "$(tools)",
          "contextualTitle": "Available Tools"
        },
        {
          "id": "codessa.chatViewSidebar",
          "name": "Chat",
          "icon": "$(comment-discussion)",
          "type": "webview",
          "contextualTitle": "Codessa Chat"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "codessa.refreshAgentView",
          "when": "view == codessaAgentView",
          "group": "navigation@1"
        },
        {
          "command": "codessa.addAgent",
          "when": "view == codessaAgentView",
          "group": "navigation@2"
        },
        {
          "command": "codessa.openModeSelector",
          "when": "view == codessaAgentView",
          "group": "navigation@3"
        }
      ],
      "view/item/context": [
        {
          "command": "codessa.askMode",
          "when": "view == codessaAgentView && viewItem == agentItem",
          "group": "1_modes@1"
        },
        {
          "command": "codessa.chatMode",
          "when": "view == codessaAgentView && viewItem == agentItem",
          "group": "1_modes@2"
        },
        {
          "command": "codessa.debugMode",
          "when": "view == codessaAgentView && viewItem == agentItem",
          "group": "1_modes@3"
        },
        {
          "command": "codessa.editMode",
          "when": "view == codessaAgentView && viewItem == agentItem",
          "group": "1_modes@4"
        },
        {
          "command": "codessa.agentMode",
          "when": "view == codessaAgentView && viewItem == agentItem",
          "group": "1_modes@5"
        },
        {
          "command": "codessa.multiAgentMode",
          "when": "view == codessaAgentView && viewItem == agentItem && viewItem.isSupervisor",
          "group": "1_modes@6"
        },
        {
          "command": "codessa.startChatWithAgentContext",
          "when": "view == codessaAgentView && viewItem == agentItem && !viewItem.isSupervisor",
          "group": "2_legacy@1"
        },
        {
          "command": "codessa.runEditTaskWithAgentContext",
          "when": "view == codessaAgentView && viewItem == agentItem && !viewItem.isSupervisor",
          "group": "2_legacy@2"
        },
        {
          "command": "codessa.runGenerateTaskWithAgentContext",
          "when": "view == codessaAgentView && viewItem == agentItem && !viewItem.isSupervisor",
          "group": "2_legacy@3"
        },
        {
          "command": "codessa.runGeneralTaskWithAgentContext",
          "when": "view == codessaAgentView && viewItem == agentItem && !viewItem.isSupervisor",
          "group": "2_legacy@4"
        },
        {
          "command": "codessa.runSupervisorTaskContext",
          "when": "view == codessaAgentView && viewItem == agentItem && viewItem.isSupervisor",
          "group": "2_legacy@5"
        },
        {
          "command": "codessa.deleteAgentContext",
          "when": "view == codessaAgentView && viewItem == agentItem",
          "group": "9_manage@1"
        }
      ],
      "editor/context": [
        {
          "command": "codessa.inlineAction",
          "group": "9_codessa@1"
        }
      ],
      "statusBar/remoteIndicator": [
        {
          "command": "codessa.showQuickActions",
          "when": "true"
        }
      ]
    },
    "configuration": {
      "title": "Codessa AI Assistant",
      "properties": {
        "codessa.logLevel": {
          "type": "string",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "default": "info",
          "description": "Logging level for the Codessa extension."
        },
        "codessa.maxToolIterations": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 50,
          "description": "Maximum number of sequential tool calls an agent can make in a single run."
        },
        "codessa.memory.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the memory system."
        },
        "codessa.memory.system": {
          "type": "string",
          "enum": [
            "basic",
            "codessa"
          ],
          "default": "codessa",
          "description": "Memory system to use. 'basic' uses the built-in memory system, 'codessa' uses Codessa/LangGraph."
        },
        "codessa.memory.maxMemories": {
          "type": "number",
          "default": 1000,
          "minimum": 10,
          "maximum": 10000,
          "description": "Maximum number of memories to store."
        },
        "codessa.memory.relevanceThreshold": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "description": "Threshold for memory relevance (0-1). Higher values mean more selective memory retrieval."
        },
        "codessa.memory.contextWindowSize": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 50,
          "description": "Number of relevant memories to include in the context window."
        },
        "codessa.memory.conversationHistorySize": {
          "type": "number",
          "default": 100,
          "minimum": 5,
          "maximum": 1000,
          "description": "Maximum number of conversation messages to keep in memory."
        },
        "codessa.memory.vectorStore": {
          "type": "string",
          "enum": [
            "memory",
            "chroma",
            "pinecone",
            "weaviate",
            "hnswlib"
          ],
          "default": "chroma",
          "description": "Vector store to use for semantic memory. 'memory' uses in-memory storage, others use their respective databases."
        },
        "codessa.memory.vectorStore.chroma": {
          "type": "object",
          "properties": {
            "directory": {
              "type": "string",
              "default": "./.codessa/chroma",
              "description": "Directory to store Chroma database files."
            },
            "collectionName": {
              "type": "string",
              "default": "codessa_memories",
              "description": "Name of the Chroma collection to use."
            }
          },
          "default": {
            "directory": "./.codessa/chroma",
            "collectionName": "codessa_memories"
          },
          "description": "Configuration for Chroma vector store."
        },
        "codessa.memory.vectorStore.pinecone": {
          "type": "object",
          "properties": {
            "apiKey": {
              "type": "string",
              "default": "",
              "description": "Pinecone API key."
            },
            "environment": {
              "type": "string",
              "default": "",
              "description": "Pinecone environment."
            },
            "indexName": {
              "type": "string",
              "default": "codessa-memories",
              "description": "Name of the Pinecone index to use."
            }
          },
          "default": {
            "apiKey": "",
            "environment": "",
            "indexName": "codessa-memories"
          },
          "description": "Configuration for Pinecone vector store."
        },
        "codessa.memory.database": {
          "type": "string",
          "enum": [
            "sqlite",
            "mysql",
            "postgres",
            "mongodb",
            "redis"
          ],
          "default": "sqlite",
          "description": "Database to use for storing structured memory data."
        },
        "codessa.memory.database.sqlite": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string",
              "default": "./.codessa/memory.db",
              "description": "Path to SQLite database file."
            }
          },
          "default": {
            "filename": "./.codessa/memory.db"
          },
          "description": "Configuration for SQLite database."
        },
        "codessa.memory.database.mysql": {
          "type": "object",
          "properties": {
            "host": {
              "type": "string",
              "default": "localhost",
              "description": "MySQL server hostname."
            },
            "port": {
              "type": "number",
              "default": 3306,
              "description": "MySQL server port."
            },
            "user": {
              "type": "string",
              "default": "root",
              "description": "MySQL username."
            },
            "password": {
              "type": "string",
              "default": "",
              "description": "MySQL password."
            },
            "database": {
              "type": "string",
              "default": "codessa",
              "description": "MySQL database name."
            },
            "table": {
              "type": "string",
              "default": "memories",
              "description": "MySQL table name for memories."
            }
          },
          "default": {
            "host": "localhost",
            "port": 3306,
            "user": "root",
            "password": "",
            "database": "codessa",
            "table": "memories"
          },
          "description": "Configuration for MySQL database."
        },
        "codessa.memory.database.postgres": {
          "type": "object",
          "properties": {
            "connectionString": {
              "type": "string",
              "default": "",
              "description": "PostgreSQL connection string."
            },
            "schema": {
              "type": "string",
              "default": "codessa",
              "description": "PostgreSQL schema to use."
            }
          },
          "default": {
            "connectionString": "",
            "schema": "codessa"
          },
          "description": "Configuration for PostgreSQL database."
        },
        "codessa.memory.database.mongodb": {
          "type": "object",
          "properties": {
            "connectionString": {
              "type": "string",
              "default": "",
              "description": "MongoDB connection string."
            },
            "database": {
              "type": "string",
              "default": "codessa",
              "description": "MongoDB database name."
            },
            "collection": {
              "type": "string",
              "default": "memories",
              "description": "MongoDB collection name."
            }
          },
          "default": {
            "connectionString": "",
            "database": "codessa",
            "collection": "memories"
          },
          "description": "Configuration for MongoDB database."
        },
        "codessa.memory.database.redis": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "default": "",
              "description": "Redis URL."
            },
            "keyPrefix": {
              "type": "string",
              "default": "codessa:",
              "description": "Prefix for Redis keys."
            }
          },
          "default": {
            "url": "",
            "keyPrefix": "codessa:"
          },
          "description": "Configuration for Redis database."
        },
        "codessa.memory.fileChunking": {
          "type": "object",
          "properties": {
            "chunkSize": {
              "type": "number",
              "default": 1000,
              "minimum": 100,
              "maximum": 10000,
              "description": "Size of file chunks in characters."
            },
            "chunkOverlap": {
              "type": "number",
              "default": 200,
              "minimum": 0,
              "maximum": 1000,
              "description": "Overlap between chunks in characters."
            },
            "maxChunksPerFile": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000,
              "description": "Maximum number of chunks to extract from a single file."
            }
          },
          "default": {
            "chunkSize": 1000,
            "chunkOverlap": 200,
            "maxChunksPerFile": 100
          },
          "description": "Configuration for file chunking."
        },
        "codessa.llm.defaultProvider": {
          "type": "string",
          "default": "ollama",
          "description": "Default LLM provider to use when no specific provider is selected."
        },
        "codessa.llm.providers": {
          "type": "object",
          "description": "Configuration for LLM providers (non-sensitive settings).",
          "additionalProperties": true,
          "default": {
            "ollama": {
              "apiEndpoint": "http://localhost:11434",
              "defaultModel": "llama3"
            },
            "lmstudio": {
              "apiEndpoint": "http://localhost:1234/v1",
              "defaultModel": "local-model"
            },
            "gguf": {
              "apiEndpoint": "http://localhost:8080",
              "defaultModel": "",
              "additionalModelDirectories": []
            },
            "openai": {
              "apiEndpoint": "https://api.openai.com/v1",
              "defaultModel": "gpt-4o"
            },
            "anthropic": {
              "apiEndpoint": "https://api.anthropic.com",
              "defaultModel": "claude-3-opus-20240229"
            },
            "googleai": {
              "defaultModel": "gemini-pro"
            },
            "mistralai": {
              "apiEndpoint": "https://api.mistral.ai/v1",
              "defaultModel": "mistral-large-latest"
            },
            "openrouter": {
              "apiEndpoint": "https://openrouter.ai/api/v1",
              "defaultModel": "openai/gpt-4o"
            },
            "huggingface": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "mistralai/Mistral-7B-Instruct-v0.2"
            },
            "deepseek": {
              "apiEndpoint": "https://api.deepseek.com/v1",
              "defaultModel": "deepseek-coder"
            },
            "cohere": {
              "apiEndpoint": "https://api.cohere.ai/v1",
              "defaultModel": "command"
            },
            "starcoder": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "bigcode/starcoder2-15b"
            },
            "codellama": {
              "apiEndpoint": "http://localhost:11434/api",
              "defaultModel": "codellama:7b",
              "endpointType": "ollama"
            },
            "replit": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "replit/replit-code-v1-3b"
            },
            "wizardcoder": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "WizardLM/WizardCoder-Python-34B-V1.0"
            },
            "xwincoder": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "xwin-lm/XwinCoder-7B"
            },
            "phi": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "microsoft/phi-3-mini-4k-instruct",
              "endpointType": "huggingface"
            },
            "yicode": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "01-ai/Yi-34B-Code"
            },
            "codegemma": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "google/codegemma-7b-it"
            },
            "santacoder": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "bigcode/santacoder"
            },
            "stablecode": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "stabilityai/stablecode-instruct-alpha-3b"
            },
            "codeparrot": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "codeparrot/codeparrot-small"
            },
            "noushermes": {
              "apiEndpoint": "https://api-inference.huggingface.co/models",
              "defaultModel": "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
              "endpointType": "huggingface"
            },
            "ai21": {
              "apiEndpoint": "https://api.ai21.com/studio/v1",
              "defaultModel": "j2-ultra"
            },
            "alephalpha": {
              "apiEndpoint": "https://api.aleph-alpha.com/v1",
              "defaultModel": "luminous-supreme"
            },
            "togetherai": {
              "apiEndpoint": "https://api.together.xyz/v1",
              "defaultModel": "mistralai/Mixtral-8x7B-Instruct-v0.1"
            },
            "perplexity": {
              "apiEndpoint": "https://api.perplexity.ai",
              "defaultModel": "sonar-medium-online"
            }
          }
        },
        "codessa.systemPrompts": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "description": "Custom system prompts. Key is the prompt name, value is the prompt text."
        },
        "codessa.agents": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the agent."
              },
              "name": {
                "type": "string",
                "description": "Display name for the agent."
              },
              "description": {
                "type": "string",
                "description": "Optional description of the agent's purpose."
              },
              "systemPromptName": {
                "type": "string",
                "description": "Name of the system prompt to use."
              },
              "llm": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string",
                    "description": "LLM Provider ID"
                  },
                  "modelId": {
                    "type": "string",
                    "description": "Model ID"
                  },
                  "options": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Provider-specific options"
                  }
                },
                "description": "LLM configuration for this agent"
              },
              "tools": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of tool IDs this agent can use"
              },
              "isSupervisor": {
                "type": "boolean",
                "default": false,
                "description": "Whether this agent can coordinate other agents"
              },
              "chainedAgentIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "IDs of agents this supervisor can delegate to"
              }
            },
            "required": [
              "id",
              "name",
              "systemPromptName"
            ]
          },
          "default": [],
          "description": "Configured AI agents"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "echo 'Skipping compilation'",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./tsconfig.dev.json",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "packageManager": "npm@9.8.1",
  "devDependencies": {
    "@types/diff": "^5.0.9",
    "@types/highlight.js": "9.12.4",
    "@types/marked": "5.0.2",
    "@types/mocha": "^10.0.6",
    "@types/node": "18.x",
    "@types/uuid": "^9.0.8",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^6.19.1",
    "@typescript-eslint/parser": "^6.19.1",
    "@vscode/test-electron": "^2.3.9",
    "eslint": "^8.56.0",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.17.1",



    "@mistralai/mistralai": "^0.1.3",
    "@pinecone-database/pinecone": "5.1.1",
    "@playwright/test": "1.52.0",
    "axios": "^1.6.7",
    "chromadb": "^1.8.1",
    "deepmerge": "4.3.1",
    "diff": "^5.1.0",
    "highlight.js": "11.11.1",
    "ibm-cloud-sdk-core": "5.3.2",

    "marked": "15.0.8",
    "mysql2": "^3.9.2",
    "openai": "^4.29.0",
    "sqlite3": "^5.1.7",
    "uuid": "^9.0.1"
  }
}
